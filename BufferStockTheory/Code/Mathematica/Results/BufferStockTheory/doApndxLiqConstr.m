(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* This cell contains generic setup stuff to prepare for execution of the programs *)
ClearAll["Global`*"]; ParamsAreSet = False;
If[$VersionNumber < 6,(*then*) Print["These programs require Mathematica version 6 or greater."]; Abort[]];
(* If running from Notebook front end, set directory to Notebook's directory *)
If[Length[$FrontEnd] > 0, NBDir = SetDirectory[NotebookDirectory[]]];
(* If not running from Notebook front end, set directory manually *)
If[Length[$FrontEnd] == 0,SetDirectory["/Volumes/Data/Work/BufferStock/BufferStockTheory/Latest/Code/Mathematica/Results/BufferStockTheory"]];
SaveFigs = True;

HomeDir = Directory[];
CodeDir = HomeDir<>"/../../CoreCode";
CDToHomeDir := SetDirectory[HomeDir];
CDToCodeDir := SetDirectory[HomeDir<>"/../../CoreCode"];
CDToCodeDir;
<< SetupModelSolutionRoutines.m;
<< SetParamsToBaselineVals.m;
CDToHomeDir;


Print["Example where PF-GIC holds, FHWC fails, RIC fails, PF-FVAC Fails"];
Clear[R,\[Beta],\[CapitalGamma],\[Rho],\[ScriptC]From\[ScriptB],\[ScriptN]Approx,\[ScriptN]Exact];
\[ScriptN]Approx[\[ScriptB]_] :=If[\[ScriptB]+(1/(1-\[ScriptCapitalR]^-1))<=0,1,(Log[(-\[CapitalThorn]Rtn/(1-\[CapitalThorn]Rtn))+(-\[ScriptCapitalR]^-1/(1-\[ScriptCapitalR]^-1))]- Log[\[ScriptB]+(1/(1-\[ScriptCapitalR]^-1))])/Log[\[ScriptCapitalR]]];
\[ScriptN]Exact[\[ScriptB]_] :=nSeek /. FindRoot[b\[Sharp][nSeek] ==\[ScriptB],{nSeek,Max[1,\[ScriptN]Approx[\[ScriptB]]]}];
\[ScriptC]From\[ScriptB][\[ScriptB]_] := \[CapitalThorn]\[CapitalGamma]PF^-\[ScriptN]Exact[\[ScriptB]];
Print["{R,\[Beta],\[CapitalGamma],\[Rho]}=",{R=0.98,\[Beta] = 0.99,\[CapitalGamma]=1.0,\[Rho]=2}];
Print["{R,\[Beta],\[CapitalGamma],\[Rho]}=",{R,\[Beta],\[CapitalGamma],\[Rho]}={0.98,1.00,0.99,2}];
Print["{\[CapitalThorn]=(R\!\(\*SuperscriptBox[\()\), \(1/\[Rho]\)]\) \!\(\*SuperscriptBox[\(\[Beta]\), \(1/\[Rho]\)]\) , \[CapitalGamma] , (R)}=",{(R)^(1/\[Rho]) \[Beta]^(1/\[Rho]) , \[CapitalGamma] , (R)}];
Print["PF-GIC holds (\[CapitalThorn] < \[CapitalGamma]):" , \[CapitalThorn]< \[CapitalGamma]];
Print["RIC fails (R < \[CapitalThorn]):",  (R) <\[CapitalThorn]];
Print["FHWC fails (R < \[CapitalGamma]):", R< \[CapitalGamma]];
Print["PF-FVAC fails (R/\[CapitalGamma]\!\(\*SuperscriptBox[\()\), \(1/\[Rho]\)]\) < \[CapitalThorn]/\[CapitalGamma] (same as 1 < \[Beta] \!\(\*SuperscriptBox[\(\[CapitalGamma]\), \(1 - \[Rho]\)]\)):",1 <\[Beta] \[CapitalGamma]^(1-\[Rho])];
{nMin,nMax}={0,300};
KinkPoints=Table[{b\[Sharp][n],c\[Sharp][n]},{n,nMin,nMax}];
KinkPointsFunc=Interpolation[KinkPoints,InterpolationOrder->2];
KinkPointsPlot=ListPlot[KinkPoints,PlotRange->All];
cfbPlot=Plot[{\[ScriptC]From\[ScriptB][\[ScriptB]]},{\[ScriptB],b\[Sharp][nMin],b\[Sharp][nMax]}];
PFGICHoldsFHWCFailsRICFails=Show[KinkPointsPlot,cfbPlot
,AxesLabel->{"\[ScriptM]","\[ScriptC]"}
];
CDToHomeDir;
ExportFigs["PFGICHoldsFHWCFailsRICFails"];
Plot[{KinkPointsFunc'[\[ScriptB]]},{\[ScriptB],b\[Sharp][nMax-200],b\[Sharp][nMax]},PlotRange->All]



